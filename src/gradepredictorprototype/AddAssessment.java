/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gradepredictorprototype;

import java.util.ArrayList;

/**
 *
 * @author kingt
 */
public class AddAssessment extends javax.swing.JFrame {

    private ArrayList<Paper> papers; // a variable to store all past assessments
    private int questionIndex; // a variable to store the question number being viewed
    private int maxQuestion = 1;

    /**
     * Creates new form AddAssessment
     */
    public AddAssessment() {
        papers = DatabaseManipulation.getPapers(GradePredictorPrototype.getSubject()); // initialises papers variable 
        questionIndex = 0; //initialises questionIndex variable
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLbl = new javax.swing.JLabel();
        typeLbl = new javax.swing.JLabel();
        typeBox = new javax.swing.JComboBox<>();
        papersBox = new javax.swing.JComboBox<>();
        profileBtn = new javax.swing.JButton();
        subjectBtn = new javax.swing.JButton();
        leftBtn = new javax.swing.JButton();
        questionLbl = new javax.swing.JLabel();
        rightBtn = new javax.swing.JButton();
        questionMarkFld = new javax.swing.JTextField();
        createPaperBtn = new javax.swing.JButton();
        informalPanel = new javax.swing.JPanel();
        totalLbl = new javax.swing.JLabel();
        scoreLbl = new javax.swing.JLabel();
        totalFld = new javax.swing.JTextField();
        scoreFld = new javax.swing.JTextField();
        classBtn = new javax.swing.JButton();
        classBtn.setVisible(GradePredictorPrototype.getViewing());
        menuBar = new javax.swing.JMenuBar();
        logout = new javax.swing.JMenu();
        exit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 600));

        titleLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        titleLbl.setText("Add Assessment");

        typeLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        typeLbl.setText("Assessment Type:");
        typeLbl.setMaximumSize(new java.awt.Dimension(165, 55));
        typeLbl.setPreferredSize(new java.awt.Dimension(165, 55));

        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Formal", "Informal" }));
        typeBox.setPreferredSize(new java.awt.Dimension(165, 55));
        typeBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeBoxItemStateChanged(evt);
            }
        });
        typeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoxActionPerformed(evt);
            }
        });

        papersBox.setModel(new javax.swing.DefaultComboBoxModel<>(papers.stream().map(x -> x.toString()).toArray(String[]::new)));
        papersBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                papersBoxItemStateChanged(evt);
            }
        });
        papersBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papersBoxActionPerformed(evt);
            }
        });

        profileBtn.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        profileBtn.setText("<html>Return to<br/> Profile</html>");
        profileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileBtnActionPerformed(evt);
            }
        });

        subjectBtn.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        subjectBtn.setText("<html>Return to<br/> Subject<html>");
        subjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectBtnActionPerformed(evt);
            }
        });

        leftBtn.setText("<");
        leftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBtnActionPerformed(evt);
            }
        });

        questionLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        if(papers.size() > 0) {
            questionLbl.setIcon(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getQuestion());
        } else {
            questionLbl.setText("No paper found");
            questionMarkFld.setEditable(false);
            rightBtn.setEnabled(false);
            leftBtn.setEnabled(false);
        }

        rightBtn.setText(">");
        rightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBtnActionPerformed(evt);
            }
        });

        questionMarkFld.setText("Enter Mark");
        questionMarkFld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                questionMarkFldFocusGained(evt);
            }
        });
        questionMarkFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                questionMarkFldKeyReleased(evt);
            }
        });

        createPaperBtn.setText("Add Paper");
        createPaperBtn.setPreferredSize(new java.awt.Dimension(165, 55));
        createPaperBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPaperBtnActionPerformed(evt);
            }
        });

        totalLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalLbl.setText("Total Mark:");
        totalLbl.setPreferredSize(new java.awt.Dimension(55, 25));
        totalLbl.setVisible(false);

        scoreLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreLbl.setText("Scored Mark:");
        scoreLbl.setPreferredSize(new java.awt.Dimension(55, 25));
        scoreLbl.setVisible(false);

        totalFld.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalFld.setText("Enter Mark");
        totalFld.setPreferredSize(new java.awt.Dimension(165, 25));
        totalFld.setVisible(false);
        totalFld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                totalFldFocusGained(evt);
            }
        });
        totalFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalFldActionPerformed(evt);
            }
        });

        scoreFld.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreFld.setText("Enter Mark");
        scoreFld.setPreferredSize(new java.awt.Dimension(165, 25));
        scoreFld.setVisible(false);
        scoreFld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                scoreFldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout informalPanelLayout = new javax.swing.GroupLayout(informalPanel);
        informalPanel.setLayout(informalPanelLayout);
        informalPanelLayout.setHorizontalGroup(
            informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informalPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scoreLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        informalPanelLayout.setVerticalGroup(
            informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informalPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalFld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(informalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        classBtn.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        classBtn.setText("Return to Class");
        classBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classBtnActionPerformed(evt);
            }
        });

        logout.setText("Log out");
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });
        menuBar.add(logout);

        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        menuBar.add(exit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(informalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(papersBox, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(848, 848, 848))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(typeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(leftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(questionMarkFld, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(rightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(852, 852, 852))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createPaperBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLbl)
                    .addComponent(classBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(questionLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(informalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(papersBox, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(questionMarkFld, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createPaperBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(179, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(subjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(profileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void profileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileBtnActionPerformed

        new StudentProfile().setVisible(true); //returns user to their profile
        this.dispose();
    }//GEN-LAST:event_profileBtnActionPerformed

    private void subjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectBtnActionPerformed

        new StudentSubject().setVisible(true); //returns user to their subject
        this.dispose();
    }//GEN-LAST:event_subjectBtnActionPerformed

    private void leftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBtnActionPerformed

        if (questionIndex > 0) { //checks that question will not go below 1 if reduced
            questionIndex--; //if it wont, it reduces question index
            questionLbl.setIcon(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getQuestion()); //and sets a label to be the correct question, at a maximum size of 250 pixles 
            questionMarkFld.setText(String.valueOf(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getScore())); // sets the label to be the stored mark incase they are returning to a question
        }
    }//GEN-LAST:event_leftBtnActionPerformed

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed

        if (questionIndex < (papers.get(papersBox.getSelectedIndex()).numOfQuestions() - 1)) { //checks question will not become greater than the number of questions their are
            questionIndex++;//if it wont it increments the question
            questionLbl.setIcon(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getQuestion());//and sets a label to be the correct question, at a maximum size of 250 pixles 
            questionMarkFld.setText(String.valueOf(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getScore()));// sets the label to be the stored mark incase they are returning to a question
        }
        if (questionIndex + 1 > maxQuestion) {
            maxQuestion = questionIndex + 1;
        }
    }//GEN-LAST:event_rightBtnActionPerformed

    private void papersBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_papersBoxActionPerformed

    }//GEN-LAST:event_papersBoxActionPerformed

    private void papersBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_papersBoxItemStateChanged

        questionIndex = 0; // when the selected paper changes resets to question 1
        maxQuestion = 1;
        questionLbl.setIcon(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getQuestion());//and sets a label to be the correct question, at a maximum size of 250 pixles 
        questionMarkFld.setText(String.valueOf(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getScore()));// sets the label to be the stored mark incase they are returning to a question
    }//GEN-LAST:event_papersBoxItemStateChanged

    private void typeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoxActionPerformed

    }//GEN-LAST:event_typeBoxActionPerformed

    private void typeBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeBoxItemStateChanged

        if (typeBox.getSelectedIndex() == 0) { //checks the paper type is set to formal, if so hides informal components and shows formal components
            totalLbl.setVisible(false);
            scoreLbl.setVisible(false);
            scoreFld.setVisible(false);
            totalFld.setVisible(false);
            papersBox.setVisible(true);
            rightBtn.setVisible(true);
            leftBtn.setVisible(true);
            questionLbl.setVisible(true);
            questionMarkFld.setVisible(true);
        } else if (typeBox.getSelectedIndex() == 1) {
            papersBox.setVisible(false);
            rightBtn.setVisible(false);
            leftBtn.setVisible(false);
            questionLbl.setVisible(false);
            questionMarkFld.setVisible(false);
            totalLbl.setVisible(true);
            scoreLbl.setVisible(true);
            scoreFld.setVisible(true);
            totalFld.setVisible(true);
        }
    }//GEN-LAST:event_typeBoxItemStateChanged

    private void createPaperBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPaperBtnActionPerformed

        if (typeBox.getSelectedIndex() == 0 && papersBox.getSelectedItem() != null) {
            if (maxQuestion == papers.get(papersBox.getSelectedIndex()).numOfQuestions()) { //checks if the user is entering a formal paper
                DatabaseManipulation.addFormalPaper(GradePredictorPrototype.getStudent(), papers.get(papersBox.getSelectedIndex()));
                /*if so this paper's informationn is stored in the database*/
                new StudentSubject().setVisible(true);//returns to the student subject form 
                this.dispose(); //closes this form   
            }
        } else if (typeBox.getSelectedIndex() == 1 && ValidationRoutines.presenceCheck(scoreFld.getText()) && ValidationRoutines.presenceCheck(totalFld.getText())) {
            /*checks if an informal paper has been selected*/
            if (ValidationRoutines.isInt(scoreFld.getText()) && ValidationRoutines.isInt(totalFld.getText())) {
                if (ValidationRoutines.rangeCheck("0", scoreFld.getText(), totalFld.getText())) {
                    DatabaseManipulation.addInformalPaper(GradePredictorPrototype.getStudent(), GradePredictorPrototype.getSubject(), Integer.parseInt(scoreFld.getText()), Integer.parseInt(totalFld.getText())); //paper data is stored in database    
                    new StudentSubject().setVisible(true);//returns to the subject form
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_createPaperBtnActionPerformed

    private void totalFldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalFldFocusGained

        totalFld.selectAll();//automatically selects all text when clicked
    }//GEN-LAST:event_totalFldFocusGained

    private void scoreFldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scoreFldFocusGained

        scoreFld.selectAll();//automatically selects all text when clicked
    }//GEN-LAST:event_scoreFldFocusGained

    private void questionMarkFldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_questionMarkFldFocusGained

        questionMarkFld.selectAll();//automatically selects all text when clicked
    }//GEN-LAST:event_questionMarkFldFocusGained

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        new Login().setVisible(true); //returns to login form
        this.dispose();
    }//GEN-LAST:event_logoutMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        System.exit(0); //closes the application
    }//GEN-LAST:event_exitMouseClicked

    private void questionMarkFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_questionMarkFldKeyReleased
        if (ValidationRoutines.presenceCheck(questionMarkFld.getText())) {
            if (ValidationRoutines.isInt(questionMarkFld.getText())) { //when the user types in the mark field, checks if they typed a number
                if (ValidationRoutines.rangeCheck("0", questionMarkFld.getText(), String.valueOf(papers.get(papersBox.getSelectedIndex()).getQuestion(questionIndex).getMark()))) {//if it was a number,checks the number of marks scored is greater than 0 but less that the maximum marks for the paper
                    papers.get(papersBox.getSelectedIndex()).setQuestionScore(questionIndex, Integer.parseInt(questionMarkFld.getText())); //saves  the number of marks locally
                }

            }
        }
    }//GEN-LAST:event_questionMarkFldKeyReleased

    private void classBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classBtnActionPerformed
        if (GradePredictorPrototype.getViewing()) { //checks if a teacher is viewing this form
            new Classes().setVisible(true);//if  they are, returns them to the class form when they click the button
            this.dispose();
        }
    }//GEN-LAST:event_classBtnActionPerformed

    private void totalFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalFldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAssessment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton classBtn;
    private javax.swing.JButton createPaperBtn;
    private javax.swing.JMenu exit;
    private javax.swing.JPanel informalPanel;
    private javax.swing.JButton leftBtn;
    private javax.swing.JMenu logout;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox<String> papersBox;
    private javax.swing.JButton profileBtn;
    private javax.swing.JLabel questionLbl;
    private javax.swing.JTextField questionMarkFld;
    private javax.swing.JButton rightBtn;
    private javax.swing.JTextField scoreFld;
    private javax.swing.JLabel scoreLbl;
    private javax.swing.JButton subjectBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JTextField totalFld;
    private javax.swing.JLabel totalLbl;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JLabel typeLbl;
    // End of variables declaration//GEN-END:variables
}
